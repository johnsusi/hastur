on: [pull_request, workflow_dispatch]
name: ci
jobs:
  macos-ci:
    name: macos-12-clang-14
    runs-on: macos-12
    steps:
      - name: Setup clang
        run: |
          echo "CC=$(brew --prefix llvm@14)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@14)/bin/clang++" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.cache/bazel
          key: ${{ matrix.name }}-${{ hashFiles('WORKSPACE', 'third_party/**') }}
          restore-keys: ${{ matrix.name }}-
      - name: Build
        run: bazel build //... ${{ matrix.bazel }}
      - name: Test
        run: bazel test //... ${{ matrix.bazel }}

  linux-ci:
    name: linux-${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: gcc-12
            os: ubuntu-22.04
            compiler: gcc
            version: 12
            bazel: --config gcc12 --run_under="valgrind --leak-check=full --errors-for-leak-kinds=all --error-exitcode=1 --track-origins=yes --show-leak-kinds=all"
            apt: g++-12 valgrind

          - name: clang-14-tsan
            os: ubuntu-22.04
            compiler: clang
            version: 14
            bazel: --config tsan

          - name: clang-asan
            os: ubuntu-22.04
            compiler: clang
            version: 14
            bazel: --config asan

          - name: clang-ubsan
            os: ubuntu-22.04
            compiler: clang
            version: 14
            bazel: --config ubsan

          - name: clang-libc++
            os: ubuntu-22.04
            compiler: clang
            version: 14
            bazel: --config libc++
            apt: libc++abi-14-dev libc++-14-dev

    steps:
      - name: Setup gcc
        if: startsWith(matrix.compiler, 'gcc')
        run: |
          echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
      - name: Setup clang
        if: startsWith(matrix.compiler, 'clang')
        run: |
          echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - name: Install
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends libgl-dev ${{ matrix.compiler }}-${{ matrix.version }} ${{ matrix.apt }}
      - uses: actions/cache@v3
        with:
          path: ~/.cache/bazel
          key: ${{ matrix.name }}-${{ hashFiles('WORKSPACE', 'third_party/**') }}
          restore-keys: ${{ matrix.name }}-
      - name: Build
        run: bazel build //... ${{ matrix.bazel }}
      - name: Test
        run: bazel test //... ${{ matrix.bazel }}
      # TODO(robinlinden): This no longer runs in CI due to http://example.com
      # being inaccessible.
      # - name: Run
      #   run: bazel run browser:tui ${{ matrix.bazel }}

  linux-gcc-10-coverage:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.cache/bazel
          key: ${{ matrix.name }}-${{ hashFiles('WORKSPACE', 'third_party/**') }}
          restore-keys: ${{ matrix.name }}-
      - name: Install
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends libgl-dev lcov
      - name: Setup
        run: |
          echo "CC=gcc-10" >> $GITHUB_ENV
          echo "CXX=g++-10" >> $GITHUB_ENV
      - name: Coverage
        run: bazel coverage --combined_report=lcov //...
      - name: Summary
        run: lcov --summary bazel-out/_coverage/_coverage_report.dat
      - name: Upload
        run: bash <(curl -s https://codecov.io/bash) -f bazel-out/_coverage/_coverage_report.dat

  windows-msvc:
    runs-on: windows-2022
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: bazel build ///... --config debug
      - name: Test
        run: bazel test ///... --config debug
      # TODO(robinlinden): This no longer runs in CI due to http://example.com
      # being inaccessible.
      # - name: Run
      #   run: bazel run browser:tui --config debug

  windows-clang-cl:
    runs-on: windows-2022
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      # windows-2022 ships with llvm 13 which doesn't seem to work for us.
      - run: choco install llvm -y --force --version 14.0.5
      - run: echo "build --config clang-cl" >.bazelrc.local
      - run: bazel test ...
      # TODO(robinlinden): This no longer runs in CI due to http://example.com
      # being inaccessible.
      # - run: bazel run browser:tui

  clang-format:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get update && sudo apt-get install --no-install-recommends clang-format-14
      - name: Format
        run: find . -name *.h -o -name *.cpp | xargs clang-format-14 -style=file -i
      - name: Check
        run: git diff --exit-code

  buildifier:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Install
        run: |
          wget --output-document=buildifier https://github.com/bazelbuild/buildtools/releases/download/5.1.0/buildifier-linux-amd64
          sudo chmod +x buildifier
      - name: Check
        run: ./buildifier --lint=warn --warnings=all -mode diff WORKSPACE $(find . -type f -iname "*.BUILD" -or -iname BUILD)

  prettier:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: npm install --global prettier@2.7.1
      # Prettier thinks our fragment shaders are JS-something and complains
      # about syntax errors.
      - run: npx prettier --ignore-path .gitignore --write . '!**/*.frag'
      - run: git diff --exit-code

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
